// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/bistack/go/db"
	"github.com/thomaspeugeot/bistack/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Foo_sql sql.NullBool
var dummy_Foo_time time.Duration
var dummy_Foo_sort sort.Float64Slice

// FooAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model fooAPI
type FooAPI struct {
	gorm.Model

	models.Foo_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	FooPointersEncoding FooPointersEncoding
}

// FooPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type FooPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// FooDB describes a foo in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model fooDB
type FooDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field fooDB.Name
	Name_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	FooPointersEncoding
}

// FooDBs arrays fooDBs
// swagger:response fooDBsResponse
type FooDBs []FooDB

// FooDBResponse provides response
// swagger:response fooDBResponse
type FooDBResponse struct {
	FooDB
}

// FooWOP is a Foo without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type FooWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Foo_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoFooStruct struct {
	// stores FooDB according to their gorm ID
	Map_FooDBID_FooDB map[uint]*FooDB

	// stores FooDB ID according to Foo address
	Map_FooPtr_FooDBID map[*models.Foo]uint

	// stores Foo according to their gorm ID
	Map_FooDBID_FooPtr map[uint]*models.Foo

	db db.DBInterface

	stage *models.StageStruct
}

func (backRepoFoo *BackRepoFooStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoFoo.stage
	return
}

func (backRepoFoo *BackRepoFooStruct) GetDB() db.DBInterface {
	return backRepoFoo.db
}

// GetFooDBFromFooPtr is a handy function to access the back repo instance from the stage instance
func (backRepoFoo *BackRepoFooStruct) GetFooDBFromFooPtr(foo *models.Foo) (fooDB *FooDB) {
	id := backRepoFoo.Map_FooPtr_FooDBID[foo]
	fooDB = backRepoFoo.Map_FooDBID_FooDB[id]
	return
}

// BackRepoFoo.CommitPhaseOne commits all staged instances of Foo to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoFoo *BackRepoFooStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for foo := range stage.Foos {
		backRepoFoo.CommitPhaseOneInstance(foo)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, foo := range backRepoFoo.Map_FooDBID_FooPtr {
		if _, ok := stage.Foos[foo]; !ok {
			backRepoFoo.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoFoo.CommitDeleteInstance commits deletion of Foo to the BackRepo
func (backRepoFoo *BackRepoFooStruct) CommitDeleteInstance(id uint) (Error error) {

	foo := backRepoFoo.Map_FooDBID_FooPtr[id]

	// foo is not staged anymore, remove fooDB
	fooDB := backRepoFoo.Map_FooDBID_FooDB[id]
	db, _ := backRepoFoo.db.Unscoped()
	_, err := db.Delete(&fooDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoFoo.Map_FooPtr_FooDBID, foo)
	delete(backRepoFoo.Map_FooDBID_FooPtr, id)
	delete(backRepoFoo.Map_FooDBID_FooDB, id)

	return
}

// BackRepoFoo.CommitPhaseOneInstance commits foo staged instances of Foo to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoFoo *BackRepoFooStruct) CommitPhaseOneInstance(foo *models.Foo) (Error error) {

	// check if the foo is not commited yet
	if _, ok := backRepoFoo.Map_FooPtr_FooDBID[foo]; ok {
		return
	}

	// initiate foo
	var fooDB FooDB
	fooDB.CopyBasicFieldsFromFoo(foo)

	_, err := backRepoFoo.db.Create(&fooDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoFoo.Map_FooPtr_FooDBID[foo] = fooDB.ID
	backRepoFoo.Map_FooDBID_FooPtr[fooDB.ID] = foo
	backRepoFoo.Map_FooDBID_FooDB[fooDB.ID] = &fooDB

	return
}

// BackRepoFoo.CommitPhaseTwo commits all staged instances of Foo to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFoo *BackRepoFooStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, foo := range backRepoFoo.Map_FooDBID_FooPtr {
		backRepoFoo.CommitPhaseTwoInstance(backRepo, idx, foo)
	}

	return
}

// BackRepoFoo.CommitPhaseTwoInstance commits {{structname }} of models.Foo to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFoo *BackRepoFooStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, foo *models.Foo) (Error error) {

	// fetch matching fooDB
	if fooDB, ok := backRepoFoo.Map_FooDBID_FooDB[idx]; ok {

		fooDB.CopyBasicFieldsFromFoo(foo)

		// insertion point for translating pointers encodings into actual pointers
		_, err := backRepoFoo.db.Save(&fooDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Foo intance %s", foo.Name))
		return err
	}

	return
}

// BackRepoFoo.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoFoo *BackRepoFooStruct) CheckoutPhaseOne() (Error error) {

	fooDBArray := make([]FooDB, 0)
	_, err := backRepoFoo.db.Find(&fooDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	fooInstancesToBeRemovedFromTheStage := make(map[*models.Foo]any)
	for key, value := range backRepoFoo.stage.Foos {
		fooInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, fooDB := range fooDBArray {
		backRepoFoo.CheckoutPhaseOneInstance(&fooDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		foo, ok := backRepoFoo.Map_FooDBID_FooPtr[fooDB.ID]
		if ok {
			delete(fooInstancesToBeRemovedFromTheStage, foo)
		}
	}

	// remove from stage and back repo's 3 maps all foos that are not in the checkout
	for foo := range fooInstancesToBeRemovedFromTheStage {
		foo.Unstage(backRepoFoo.GetStage())

		// remove instance from the back repo 3 maps
		fooID := backRepoFoo.Map_FooPtr_FooDBID[foo]
		delete(backRepoFoo.Map_FooPtr_FooDBID, foo)
		delete(backRepoFoo.Map_FooDBID_FooDB, fooID)
		delete(backRepoFoo.Map_FooDBID_FooPtr, fooID)
	}

	return
}

// CheckoutPhaseOneInstance takes a fooDB that has been found in the DB, updates the backRepo and stages the
// models version of the fooDB
func (backRepoFoo *BackRepoFooStruct) CheckoutPhaseOneInstance(fooDB *FooDB) (Error error) {

	foo, ok := backRepoFoo.Map_FooDBID_FooPtr[fooDB.ID]
	if !ok {
		foo = new(models.Foo)

		backRepoFoo.Map_FooDBID_FooPtr[fooDB.ID] = foo
		backRepoFoo.Map_FooPtr_FooDBID[foo] = fooDB.ID

		// append model store with the new element
		foo.Name = fooDB.Name_Data.String
		foo.Stage(backRepoFoo.GetStage())
	}
	fooDB.CopyBasicFieldsToFoo(foo)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	foo.Stage(backRepoFoo.GetStage())

	// preserve pointer to fooDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_FooDBID_FooDB)[fooDB hold variable pointers
	fooDB_Data := *fooDB
	preservedPtrToFoo := &fooDB_Data
	backRepoFoo.Map_FooDBID_FooDB[fooDB.ID] = preservedPtrToFoo

	return
}

// BackRepoFoo.CheckoutPhaseTwo Checkouts all staged instances of Foo to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFoo *BackRepoFooStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, fooDB := range backRepoFoo.Map_FooDBID_FooDB {
		backRepoFoo.CheckoutPhaseTwoInstance(backRepo, fooDB)
	}
	return
}

// BackRepoFoo.CheckoutPhaseTwoInstance Checkouts staged instances of Foo to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFoo *BackRepoFooStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, fooDB *FooDB) (Error error) {

	foo := backRepoFoo.Map_FooDBID_FooPtr[fooDB.ID]

	fooDB.DecodePointers(backRepo, foo)

	return
}

func (fooDB *FooDB) DecodePointers(backRepo *BackRepoStruct, foo *models.Foo) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitFoo allows commit of a single foo (if already staged)
func (backRepo *BackRepoStruct) CommitFoo(foo *models.Foo) {
	backRepo.BackRepoFoo.CommitPhaseOneInstance(foo)
	if id, ok := backRepo.BackRepoFoo.Map_FooPtr_FooDBID[foo]; ok {
		backRepo.BackRepoFoo.CommitPhaseTwoInstance(backRepo, id, foo)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitFoo allows checkout of a single foo (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutFoo(foo *models.Foo) {
	// check if the foo is staged
	if _, ok := backRepo.BackRepoFoo.Map_FooPtr_FooDBID[foo]; ok {

		if id, ok := backRepo.BackRepoFoo.Map_FooPtr_FooDBID[foo]; ok {
			var fooDB FooDB
			fooDB.ID = id

			if _, err := backRepo.BackRepoFoo.db.First(&fooDB, id); err != nil {
				log.Fatalln("CheckoutFoo : Problem with getting object with id:", id)
			}
			backRepo.BackRepoFoo.CheckoutPhaseOneInstance(&fooDB)
			backRepo.BackRepoFoo.CheckoutPhaseTwoInstance(backRepo, &fooDB)
		}
	}
}

// CopyBasicFieldsFromFoo
func (fooDB *FooDB) CopyBasicFieldsFromFoo(foo *models.Foo) {
	// insertion point for fields commit

	fooDB.Name_Data.String = foo.Name
	fooDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromFoo_WOP
func (fooDB *FooDB) CopyBasicFieldsFromFoo_WOP(foo *models.Foo_WOP) {
	// insertion point for fields commit

	fooDB.Name_Data.String = foo.Name
	fooDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromFooWOP
func (fooDB *FooDB) CopyBasicFieldsFromFooWOP(foo *FooWOP) {
	// insertion point for fields commit

	fooDB.Name_Data.String = foo.Name
	fooDB.Name_Data.Valid = true
}

// CopyBasicFieldsToFoo
func (fooDB *FooDB) CopyBasicFieldsToFoo(foo *models.Foo) {
	// insertion point for checkout of basic fields (back repo to stage)
	foo.Name = fooDB.Name_Data.String
}

// CopyBasicFieldsToFoo_WOP
func (fooDB *FooDB) CopyBasicFieldsToFoo_WOP(foo *models.Foo_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	foo.Name = fooDB.Name_Data.String
}

// CopyBasicFieldsToFooWOP
func (fooDB *FooDB) CopyBasicFieldsToFooWOP(foo *FooWOP) {
	foo.ID = int(fooDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	foo.Name = fooDB.Name_Data.String
}

// Backup generates a json file from a slice of all FooDB instances in the backrepo
func (backRepoFoo *BackRepoFooStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "FooDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*FooDB, 0)
	for _, fooDB := range backRepoFoo.Map_FooDBID_FooDB {
		forBackup = append(forBackup, fooDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Foo ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Foo file", err.Error())
	}
}

// Backup generates a json file from a slice of all FooDB instances in the backrepo
func (backRepoFoo *BackRepoFooStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*FooDB, 0)
	for _, fooDB := range backRepoFoo.Map_FooDBID_FooDB {
		forBackup = append(forBackup, fooDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Foo")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Foo_Fields, -1)
	for _, fooDB := range forBackup {

		var fooWOP FooWOP
		fooDB.CopyBasicFieldsToFooWOP(&fooWOP)

		row := sh.AddRow()
		row.WriteStruct(&fooWOP, -1)
	}
}

// RestoreXL from the "Foo" sheet all FooDB instances
func (backRepoFoo *BackRepoFooStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoFooid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Foo"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoFoo.rowVisitorFoo)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoFoo *BackRepoFooStruct) rowVisitorFoo(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var fooWOP FooWOP
		row.ReadStruct(&fooWOP)

		// add the unmarshalled struct to the stage
		fooDB := new(FooDB)
		fooDB.CopyBasicFieldsFromFooWOP(&fooWOP)

		fooDB_ID_atBackupTime := fooDB.ID
		fooDB.ID = 0
		_, err := backRepoFoo.db.Create(fooDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoFoo.Map_FooDBID_FooDB[fooDB.ID] = fooDB
		BackRepoFooid_atBckpTime_newID[fooDB_ID_atBackupTime] = fooDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "FooDB.json" in dirPath that stores an array
// of FooDB and stores it in the database
// the map BackRepoFooid_atBckpTime_newID is updated accordingly
func (backRepoFoo *BackRepoFooStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoFooid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "FooDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Foo file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*FooDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_FooDBID_FooDB
	for _, fooDB := range forRestore {

		fooDB_ID_atBackupTime := fooDB.ID
		fooDB.ID = 0
		_, err := backRepoFoo.db.Create(fooDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoFoo.Map_FooDBID_FooDB[fooDB.ID] = fooDB
		BackRepoFooid_atBckpTime_newID[fooDB_ID_atBackupTime] = fooDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Foo file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Foo>id_atBckpTime_newID
// to compute new index
func (backRepoFoo *BackRepoFooStruct) RestorePhaseTwo() {

	for _, fooDB := range backRepoFoo.Map_FooDBID_FooDB {

		// next line of code is to avert unused variable compilation error
		_ = fooDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoFoo.db.Model(fooDB)
		_, err := db.Updates(*fooDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoFoo.ResetReversePointers commits all staged instances of Foo to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFoo *BackRepoFooStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, foo := range backRepoFoo.Map_FooDBID_FooPtr {
		backRepoFoo.ResetReversePointersInstance(backRepo, idx, foo)
	}

	return
}

func (backRepoFoo *BackRepoFooStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, foo *models.Foo) (Error error) {

	// fetch matching fooDB
	if fooDB, ok := backRepoFoo.Map_FooDBID_FooDB[idx]; ok {
		_ = fooDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoFooid_atBckpTime_newID map[uint]uint
